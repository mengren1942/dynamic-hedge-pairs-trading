# pairs/__init__.py
"""
pairs: Utilities for market data access, universes, plotting, statistics, and strategies.

Public entry points (lazy-loaded):
- Data:         load_prices(), load_polygon_lake(), download_openbb()
- Universe:     load_universe(), list_universes()
- Plotting:     plot_single_price_with_shading(), plot_pair_legs_with_trades()
- Statistics:   find_cointegrated_pairs_executor(), find_cointegrated_pairs_dualgate(),
                estimate_halflife(), test_spread_stationarity(),
                summarize_spread_stationarity_joblib()
- Strategies:   estimate_halflife_window(), zscore_from_spread(), generate_pair_signals()
- Models (opt): fit_kalman_hedge(), filter_kf_on_new(),
                continue_kalman_on_window(), continue_kalman_for_pairs_joblib()
"""

from __future__ import annotations
from typing import TYPE_CHECKING

# ----------------------- Public API names -----------------------
__all__ = [
    "__version__",
    # data
    "load_prices",
    "load_polygon_lake",
    "download_openbb",
    # universes
    "load_universe",
    "list_universes",
    # plotting
    "plot_single_price_with_shading",
    "plot_pair_legs_with_trades",
    # statistics (cointegration)
    "find_cointegrated_pairs_executor",
    "find_cointegrated_pairs_dualgate",
    # statistics (stationarity)
    "estimate_halflife",
    "test_spread_stationarity",
    "summarize_spread_stationarity_joblib",
    # strategies (signals)
    "estimate_halflife_window",
    "zscore_from_spread",
    "generate_pair_signals",
    # models (Kalman) appended conditionally below
]

# ---- version (works in editable installs too) ----
try:
    from importlib.metadata import version as _pkg_version, PackageNotFoundError  # py3.8+
except Exception:  # pragma: no cover
    from importlib_metadata import version as _pkg_version, PackageNotFoundError  # fallback

try:
    __version__ = _pkg_version("pairs")
except PackageNotFoundError:  # running from source without installed metadata
    __version__ = "0+unknown"

# ----------------------- Lazy attribute loader -----------------------
# Keep imports cheap and centralized.
_LAZY_MAP = {
    # market data (re-exported from pairs.market_data)
    "load_prices": ("pairs.market_data", "load_prices"),
    "load_polygon_lake": ("pairs.market_data", "load_polygon_lake"),
    "download_openbb": ("pairs.market_data", "download_openbb"),
    # universes
    "load_universe": ("pairs.universes", "load_universe"),
    "list_universes": ("pairs.universes", "list_universes"),
    # plotting (modules may be added later; lazy import avoids hard dependency)
    "plot_single_price_with_shading": ("pairs.plotting.single_price", "plot_single_price_with_shading"),
    "plot_pair_legs_with_trades": ("pairs.plotting.pair_trades", "plot_pair_legs_with_trades"),
    # statistics (cointegration)
    "find_cointegrated_pairs_executor": ("pairs.stats.cointegration", "find_cointegrated_pairs_executor"),
    "find_cointegrated_pairs_dualgate": ("pairs.stats.cointegration", "find_cointegrated_pairs_dualgate"),
    # statistics (stationarity)
    "estimate_halflife": ("pairs.stats.stationarity", "estimate_halflife"),
    "test_spread_stationarity": ("pairs.stats.stationarity", "test_spread_stationarity"),
    "summarize_spread_stationarity_joblib": ("pairs.stats.stationarity", "summarize_spread_stationarity_joblib"),
    # strategies (signals)
    "estimate_halflife_window": ("pairs.strategies.signals", "estimate_halflife_window"),
    "zscore_from_spread": ("pairs.strategies.signals", "zscore_from_spread"),
    "generate_pair_signals": ("pairs.strategies.signals", "generate_pair_signals"),
}

# Optionally expose models if present without importing now.
# This keeps import time light but provides a clean top-level API when available.
try:
    import importlib.util as _ilu
    if _ilu.find_spec("pairs.models.kalman") is not None:
        _LAZY_MAP.update({
            "fit_kalman_hedge": ("pairs.models.kalman", "fit_kalman_hedge"),
            "filter_kf_on_new": ("pairs.models.kalman", "filter_kf_on_new"),
            "continue_kalman_on_window": ("pairs.models.kalman", "continue_kalman_on_window"),
            "continue_kalman_for_pairs_joblib": ("pairs.models.kalman", "continue_kalman_for_pairs_joblib"),
        })
        __all__ += [
            "fit_kalman_hedge",
            "filter_kf_on_new",
            "continue_kalman_on_window",
            "continue_kalman_for_pairs_joblib",
        ]
except Exception:  # pragma: no cover
    pass


def __getattr__(name: str):
    """Lazy re-exports for public API symbols."""
    target = _LAZY_MAP.get(name)
    if not target:
        raise AttributeError(f"module {__name__!r} has no attribute {name!r}")
    mod_name, attr = target
    import importlib
    mod = importlib.import_module(mod_name)
    obj = getattr(mod, attr)
    globals()[name] = obj  # cache for future accesses
    return obj


# ---- Static imports for type checkers (no runtime cost) ----
if TYPE_CHECKING:  # pragma: no cover
    from .market_data import load_prices, load_polygon_lake, download_openbb
    from .universes import load_universe, list_universes
    from .plotting.single_price import plot_single_price_with_shading
    from .plotting.pair_trades import plot_pair_legs_with_trades
    from .stats.cointegration import (
        find_cointegrated_pairs_executor,
        find_cointegrated_pairs_dualgate,
    )
    from .stats.stationarity import (
        estimate_halflife,
        test_spread_stationarity,
        summarize_spread_stationarity_joblib,
    )
    from .strategies.signals import (
        estimate_halflife_window,
        zscore_from_spread,
        generate_pair_signals,
    )
    try:
        from .models.kalman import (
            fit_kalman_hedge,
            filter_kf_on_new,
            continue_kalman_on_window,
            continue_kalman_for_pairs_joblib,
        )
    except Exception:
        pass
